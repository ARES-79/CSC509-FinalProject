package app.View;

import java.awt.Color;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.ArrayDeque;
import java.util.Deque;

import javax.swing.JPanel;
import javax.swing.border.MatteBorder;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import app.Data.Circle;
import app.Data.Highlight;

/**
 * The {@code DrawPanel} class is a custom {@link JPanel} that visually represents
 * circles received from PropertyChangeEvents. Each circle is drawn with its respective
 * color, and an outline is added around each circle.
 * <p>
 * This panel is used as part of a graphical interface to display real-time visualizations
 * of the circles generated by the system. It ensures that each circle is displayed with
 * its fill color and a black border.
 */
public class DrawPanel extends JPanel implements PropertyChangeListener {

    private final Logger log = LoggerFactory.getLogger(DrawPanel.class);
    private Deque<Circle> circleList = new ArrayDeque<>();
    private Deque<Highlight> highlightList = new ArrayDeque<>();
    
    private final String paragraph = "Lorem ipsum odor amet, consectetuer adipiscing elit. Eu diam luctus semper montes sodales. Sed nostra dignissim venenatis ut ullamcorper platea sagittis. Nunc venenatis dolor turpis duis facilisi. Per montes habitant felis efficitur pretium placerat enim. Montes per montes elit facilisi feugiat. Maecenas duis torquent enim velit urna dignissim.\n" + //
              "\n" + //
              "Quisque quisque justo scelerisque eget potenti in eleifend taciti ipsum. Quisque congue felis pharetra, leo ipsum netus? Fusce amet sollicitudin eleifend habitant molestie velit. Placerat lobortis maecenas donec et interdum nascetur commodo. Lacus dis venenatis tristique eget auctor quisque. Montes erat nulla quam mus curabitur erat gravida. Venenatis sem potenti fusce iaculis sed felis condimentum purus. Iaculis ipsum curabitur gravida penatibus lorem efficitur leo fusce. Pulvinar efficitur vitae odio urna pellentesque; litora ad mollis.";
    //@TODO move lineHeight to blackboard
    private final int lineHeight = 100;
    private int xOffset = 50;  // Offsets for text
    private int yOffset = 50;
    
    public DrawPanel() {
        setBackground(Color.WHITE);
        setBorder(new MatteBorder(3, 3, 3, 3, Color.BLACK));
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Font font = new Font("Arial", Font.PLAIN, 14);
        g.setFont(font);

        // Use FontMetrics to measure text
        FontMetrics metrics = g.getFontMetrics(font);
        
        // Wrap the paragraph into multiple lines
        String[] lines = wrapText(paragraph, metrics, getWidth() - 2 * xOffset);

        // Draw each line of text
        int currentY = yOffset;
        for (String line : lines) {
            g.drawString(line, xOffset, currentY);
            // Move to the next line
            currentY += lineHeight;
        }
        
        for (Highlight highlight : highlightList) {
            // Adjust x and y coordinates of the highlight considering xOffset and currentY
            //int adjustedX = highlight.getX() + 50;
            //int adjustedY = highlight.getY() + 50;
            //highlight.setX(adjustedX);
            //highlight.setY(adjustedY);
            highlight.drawHighlight(g);
        }
    }

    /**
     * Wraps the input text into multiple lines based on the available width.
     * 
     * @param text The input text to wrap.
     * @param metrics The font metrics used to calculate string width.
     * @param maxWidth The maximum width available for each line.
     * @return A string array containing wrapped lines of text.
     */
    private String[] wrapText(String text, FontMetrics metrics, int maxWidth) {
        String[] words = text.split(" ");
        StringBuilder currentLine = new StringBuilder();
        java.util.List<String> lines = new java.util.ArrayList<>();
        
        for (String word : words) {
            if (metrics.stringWidth(currentLine.toString() + word) <= maxWidth) {
                currentLine.append(word).append(" ");
            } else {
                lines.add(currentLine.toString().trim());
                currentLine.setLength(0);  // Reset the current line
                currentLine.append(word).append(" ");
            }
        }

        // Add the last line
        if (currentLine.length() > 0) {
            lines.add(currentLine.toString().trim());
        }

        return lines.toArray(new String[0]);
    }

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        if (evt.getNewValue() instanceof Deque<?>) {
            this.highlightList = (Deque<Highlight>) evt.getNewValue();
            repaint();
        }
        else {
            log.warn("Unexpected payload in PropertyChangeEvent: {}", evt.getNewValue());
        }
        //log.warn("Property change detected: {}", evt.getPropertyName());
    }
}
